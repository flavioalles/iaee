package storage;

public class SqlScripts {
    /* CREATE */
    public static final String CREATE_INDEXES =
            "CREATE UNIQUE INDEX IF NOT EXISTS idx_CpuUsage ON CpuUsage ( TIME, NODE_ID, CORE_ID ) ; CREATE UNIQUE INDEX IF NOT EXISTS idx_DiskUsage ON DiskUsage ( PARTITION_NAME, NODE_ID, TIME ) ; CREATE UNIQUE INDEX IF NOT EXISTS idx_EnergyConsumption ON EnergyConsumption ( TIME, NODE_ID ) ; CREATE UNIQUE INDEX IF NOT EXISTS idx_MemoryUsage ON MemoryUsage ( NODE_ID, TIME ) ; CREATE UNIQUE INDEX IF NOT EXISTS idx_NetworkUsage ON NetworkUsage ( NODE_ID, TIME, INTERFACE ) ;";
    public static final String CREATE_TABLES =
            "CREATE TABLE IF NOT EXISTS UnityType ( ID INTEGER, UNITY TEXT, CONSTRAINT PK_UNITY_TYPE PRIMARY KEY ( ID ) ) ; CREATE TABLE IF NOT EXISTS Sensor ( ID INTEGER, SENSOR_UUID INTEGER UNIQUE, CONSTRAINT 'PK_Sensor' PRIMARY KEY ( ID ) ) ; CREATE TABLE IF NOT EXISTS Node ( ID INTEGER, TIME DATETIME, NODE_NAME TEXT, NODE_UUID INTEGER UNIQUE, CONSTRAINT 'PK_Node' PRIMARY KEY ( ID ) ) ; CREATE TABLE IF NOT EXISTS CpuUsage ( ID INTEGER, NODE_ID INTEGER CONSTRAINT 'FK_CpuUsage' REFERENCES Node ( ID ) ON DELETE CASCADE ON UPDATE CASCADE, TIME DATETIME, CORE_ID INTEGER, USER INTEGER, NICE INTEGER, SYSMODE INTEGER, IDLE INTEGER, IOWAIT INTEGER, IRQ INTEGER, SOFTIRQ INTEGER, STEAL INTEGER, GUEST INTEGER, CONSTRAINT 'PK_CpuUsage' PRIMARY KEY ( ID ) ) ; CREATE TABLE IF NOT EXISTS DiskUsage ( ID INTEGER, NODE_ID INTEGER, TIME DATETIME, PARTITION_NAME INTEGER, READS_COMPLETED INTEGER, READS_MERGED INTEGER, WRITES_MERGED INTEGER, SECTORS_READ INTEGER, MILLISECONDS_READING INTEGER, WRITES_COMPLETED INTEGER, SECTORS_WRITTEN INTEGER, MILLISECONDS_WRITING INTEGER, IO_IN_PROGRESS INTEGER, MILLISECONDS_SPENT_IN_IO INTEGER, WEIGHTED_MILLISECONDS_DOING_IO INTEGER, CONSTRAINT 'PK_DiskUsage' PRIMARY KEY ( ID ), CONSTRAINT 'FK_DiskUsage' FOREIGN KEY ( NODE_ID ) REFERENCES Node ( ID ) ON DELETE CASCADE ON UPDATE CASCADE ) ; CREATE TABLE IF NOT EXISTS EnergyConsumption ( ID INTEGER, NODE_ID INTEGER, TIME DATETIME, TOTAL REAL, CPU REAL, DISK REAL, MEM REAL, NET REAL, MISC REAL, PRIMARY KEY ( ID ), CONSTRAINT 'FK_EnergyConsumption' FOREIGN KEY ( NODE_ID ) REFERENCES Node ( ID ) ON DELETE CASCADE ON UPDATE CASCADE ) ; CREATE TABLE IF NOT EXISTS MemoryUsage ( ID INTEGER, NODE_ID INTEGER, TIME DATETIME, SIZE INTEGER, RESIDENT INTEGER, SHARE INTEGER, TEXT INTEGER, DATA INTEGER, VIRTUALSIZE INTEGER, RSS INTEGER, RSSLIM INTEGER, MEM_TOTAL INTEGER, MEM_USED INTEGER, MEM_FREE INTEGER, MEM_BUFFERS INTEGER, MEM_CACHED INTEGER, CONSTRAINT 'PK_MemoryUsage' PRIMARY KEY ( ID ), CONSTRAINT 'FK_MemoryUsage' FOREIGN KEY ( NODE_ID ) REFERENCES Node ( ID ) ON DELETE CASCADE ON UPDATE CASCADE ) ; CREATE TABLE IF NOT EXISTS NetworkUsage ( ID INTEGER, NODE_ID INTEGER, TIME DATETIME, INTERFACE TEXT, R_BYTES INTEGER, R_PACKETS INTEGER, R_ERRORS INTEGER, R_DROP INTEGER, R_FIFO INTEGER, R_FRAME INTEGER, R_COMPRESSED INTEGER, R_MULTICAST INTEGER, T_BYTES INTEGER, T_PACKETS INTEGER, T_ERRORS INTEGER, T_DROP INTEGER, T_FIFO INTEGER, T_COLLS INTEGER, T_CARRIER INTEGER, T_COMPRESSED INTEGER, CONSTRAINT 'PK_NetworkUsage' PRIMARY KEY ( ID ), CONSTRAINT 'FK_NetworkUsage' FOREIGN KEY ( NODE_ID ) REFERENCES Node ( ID ) ON DELETE CASCADE ON UPDATE CASCADE ) ; CREATE TABLE IF NOT EXISTS SensorUsage ( ID INTEGER, NODE_ID INTEGER, TIME DATETIME, SENSOR_ID INTEGER, CHANNEL_NUMBER INTEGER, UNITY_TYPE_ID INTEGER, VALUE NUMERIC, CONSTRAINT 'PK_Sensor' PRIMARY KEY ( ID ), CONSTRAINT 'FK_SensorUsage' FOREIGN KEY ( NODE_ID ) REFERENCES Node ( ID ) ON DELETE CASCADE ON UPDATE CASCADE );";
    /* INSERT */
    public static final String INSERT_CPU_USAGE =
            "INSERT INTO CpuUsage (NODE_ID, TIME, CORE_ID, USER, NICE, SYSMODE, IDLE, IOWAIT, IRQ, SOFTIRQ, STEAL, GUEST) " +
            "VALUES (%s, '%s', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);";
    public static final String INSERT_DISK_USAGE =
            "INSERT INTO DiskUsage (NODE_ID, TIME, PARTITION_NAME, READS_COMPLETED, READS_MERGED, WRITES_MERGED, SECTORS_READ, MILLISECONDS_READING, WRITES_COMPLETED, SECTORS_WRITTEN, MILLISECONDS_WRITING, IO_IN_PROGRESS, MILLISECONDS_SPENT_IN_IO, WEIGHTED_MILLISECONDS_DOING_IO) " +
            "VALUES (%s, '%s', '%s', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);";
    public static final String INSERT_ENERGY_CONSUMPTION =
            "INSERT INTO EnergyConsumption (NODE_ID, TIME, TOTAL, CPU, DISK, MEM, NET, MISC) " +
            "VALUES (%s, '%s', %s, %s, %s, %s, %s, %s);";
    public static final String INSERT_MEMORY_USAGE =
            "INSERT INTO MemoryUsage (NODE_ID, TIME, SIZE, RESIDENT, SHARE, TEXT, DATA, VIRTUALSIZE, RSS, RSSLIM, MEM_TOTAL, MEM_USED, MEM_FREE, MEM_BUFFERS, MEM_CACHED) " +
            "VALUES (%s, '%s', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);";
    public static final String INSERT_NETWORK_USAGE =
            "INSERT INTO NetworkUsage (NODE_ID, TIME, INTERFACE, R_BYTES, R_PACKETS, R_ERRORS, R_DROP, R_FIFO, R_FRAME, R_COMPRESSED, R_MULTICAST, T_BYTES, T_PACKETS, T_ERRORS, T_DROP, T_FIFO, T_COLLS, T_CARRIER, T_COMPRESSED) " +
            "VALUES (%s, '%s', '%s', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);";
    public static final String INSERT_NODE =
            //"INSERT INTO Node (NODE_UUID) VALUES (?);";
    		// TIME, NODE_NAME, NODE_UUID
    		"INSERT INTO Node (TIME, NODE_NAME, NODE_UUID) " + 
    		"VALUES ('%s', '%s', %s);";
    public static final String INSERT_SENSOR =
            "INSERT OR REPLACE INTO Sensor (SENSOR_UUID) VALUES(?);";
    public static final String INSERT_SENSOR_USAGE =
            "INSERT INTO SensorUsage(NODE_ID, TIME, SENSOR_ID, CHANNEL_NUMBER, UNITY_TYPE_ID, VALUE) VALUES (%s,'%s',%s,%s,%s,%s);";
    public static final String INSERT_UNITY_TYPE =
            "INSERT OR REPLACE INTO UnityType (UNITY) VALUES ('CELCIUS'); INSERT OR REPLACE INTO UnityType (UNITY) VALUES ('WATT'); INSERT OR REPLACE INTO UnityType (UNITY) VALUES ('PERCENT'); INSERT OR REPLACE INTO UnityType (UNITY) VALUES ('EMPTY'); INSERT OR REPLACE INTO UnityType (UNITY) VALUES ('MBITS'); INSERT OR REPLACE INTO UnityType (UNITY) VALUES ('GBITS');";
    /* SELECT */
    public static final String SELECT_CPU_DATA =
            "SELECT CpuUsage.USER, CpuUsage.NICE, CpuUsage.SYSMODE, CpuUsage.IDLE, CpuUsage.IOWAIT, CpuUsage.IRQ, CpuUsage.SOFTIRQ, CpuUsage.STEAL, CpuUsage.GUEST FROM Node INNER JOIN CpuUsage ON Node.ID = CpuUsage.NODE_ID WHERE Node.NODE_UUID = %s AND CpuUsage.Core_ID = %s AND CpuUsage.Time >= '%s' AND CpuUsage.Time <= '%s' ORDER BY CpuUsage.TIME;";
    public static final String SELECT_DISK_DATA =
            "SELECT MILLISECONDS_SPENT_IN_IO FROM Node, DiskUsage WHERE Node.ID = DiskUsage.NODE_ID AND Node.NODE_UUID = %s AND DiskUsage.PARTITION_NAME = '%s' AND DiskUsage.Time >= '%s' AND DiskUsage.Time <= '%s' ORDER BY DiskUsage.TIME;";
    public static final String SELECT_MEM_DATA =
            "SELECT DISTINCT MEM_TOTAL FROM Node, MemoryUsage WHERE Node.ID = MemoryUsage.NODE_ID AND Node.NODE_UUID = %s AND MemoryUsage.Time >= '%s' AND MemoryUsage.Time <= '%s';";
    public static final String SELECT_ESTIMATION_RESULTS =
            "SELECT DISTINCT Node.NODE_UUID, EnergyConsumption.CPU, EnergyConsumption.DISK, EnergyConsumption.MEM, EnergyConsumption.NET, EnergyConsumption.MISC FROM EnergyConsumption,  Node WHERE EnergyConsumption.NODE_ID = Node.ID ORDER BY EnergyConsumption.TIME;";
    public static final String SELECT_NODES = "SELECT * FROM Node;";

    public static final String SELECT_NODES_UUID = "SELECT NODE_UUID FROM Node;";

    public static final String SELECT_SENSORS = "SELECT * FROM Sensor;";

    public static final String SELECT_UNITY = "SELECT * FROM UnityType";
}
